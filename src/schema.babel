// schema.js
import {
  GraphQLObjectType,
  GraphQLSchema,
  GraphQLInt,
  GraphQLString,
  GraphQLNonNull
} from 'graphql/type';


import R from 'ramda';
//console.log(R.add(2, 3)); // test ramda

let count = 0;

// Some simple permission set
let permissions = ['read','write','ownProjects','getClientContacts'];



let projectType = new GraphQLObjectType({
  name: 'Project',
  description: 'The project resource(s)',
  fields: () => ({
    id: {
      type: GraphQLInt,
      description: 'The id of the project.',
    },
    name: {
      type: GraphQLString,
      description: 'The name of the project.',
    }
  })
});



let clientType = new GraphQLObjectType({
  name: 'Client',
  type: GraphQLString,
  description: 'Some client resource',
  resolve: function() {
    return 'arbitrary client data';
  }
});


// The extracted schema object
let schemaObject = {
  query: new GraphQLObjectType(
    {
      name: 'RootQueryType',
      fields: {
        count: {
          type: GraphQLInt,
          description: 'the count',
          resolve: function() {
            return count;
          }
        },
        project: {
          type:projectType,
          args: {
            id: {
              description: 'id of the human',
              type: GraphQLInt
            }
          },
          resolve: (root, {id}) => {
            return {id:id,name:'test'}
          }
        },
        client: clientType
      }
    }
  ),
  mutation: new GraphQLObjectType({
    name: 'RootMutationType',
    fields: {
      updateCount: {
        type: GraphQLInt,
        description: 'Updates the count',
        resolve: function() {
          count += 1;
          return count;
        }
      }
    }
  })
};








let schema = new GraphQLSchema(schemaObject);

export default schema;
